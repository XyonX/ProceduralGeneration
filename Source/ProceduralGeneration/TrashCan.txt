	// Load the image file
	TArray<uint8> FileData;
	if (!FFileHelper::LoadFileToArray(FileData, *inFilePath))
	{
		// Failed to load the file
		GEngine->AddOnScreenDebugMessage(-1, 10.0f, FColor::Red,"Failed to load the file");
		return false;
	}


	// Calculate the expected size of the raw data based on the desired image size
	int32 ExpectedDataSize = ImageSize * ImageSize * sizeof(float);

	if (FileData.Num() != ExpectedDataSize)
	{
		// Invalid data size
		GEngine->AddOnScreenDebugMessage(-1, 10.0f, FColor::Red, "Invalid data size");
		return false;
	}

	// Clear the height map array
	OutHeightMap.Empty();

	// Iterate through the raw data and extract the height values
	for (int32 i = 0; i < FileData.Num(); i += sizeof(float))
	{
		// Extract the height value from the raw data
		float Height = *reinterpret_cast<const float*>(&FileData[i]);
		// Add the height value to the height map array
		OutHeightMap.Add(Height);
	}

	return true;
	
	//Removed code
	
	bool ABaseProceduralActor::GetTileMeshData()
    {
    	if( TileMeshDataAsset != nullptr)
    	{
    		return true ;
    	}
    	FString AssetPath = FString::Printf(TEXT("ProceduralGeneration/Data/%s.%s"), *TileMeshDataAssetName, *TileMeshDataAssetName);
    	TileMeshDataAsset = Cast<UDataTable>(StaticLoadObject(UDataTable::StaticClass(), nullptr, *AssetPath));
    
    	// or
    	//FName AssetName = FName(*TileMeshDataAssetName);
    	//TileMeshDataAsset = Cast<UDataTable>(StaticLoadObject(UDataTable::StaticClass(), nullptr, *TileMeshDataAssetName_FName.ToString()));
    	if(TileMeshDataAsset == nullptr)
    	{
    		return false ;
    	}
    	if(GEngine){GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Green, TEXT("  Data asset imported  !!"));}
    	return true;
    	
    }
    
    bool ABaseProceduralActor::SetTileMeshData()
    {
    	
    	TileMeshDataAsset->GetAllRows<FTileMeshData>(TEXT(""), TileMeshDataArray);
    	if(TileMeshDataArray.IsEmpty())
    	{
    		return  false ;
    	}
    	if(GEngine){GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Yellow, TEXT(" TileMesh Initializing ...."));}
    	DefaultTileMesh->Init(this ,TileMeshDataArray[0]);
    	InitTileMesh(TotalTileMesh,TileMeshDataArray);
    	return true;
    	
    }
    
    
    
void ABaseProceduralActor::InitTileMesh(TArray<UTileMesh*>& totaltilemeshes, TArray<FTileMeshData*>& totaltilemeshedatas)
{
	for (FTileMeshData* tilemeshdata : totaltilemeshedatas )
	{
		UTileMesh* TileMesh = NewObject<UTileMesh>();
		TileMesh->Init(this,tilemeshdata);
		totaltilemeshes.Add(TileMesh);
			
	}
}
/*
// THE MAIN ALGORITHM
void ABaseProceduralActor::WaveFunctionCollapse()
{

	//Adding RemainingTile To All Tile
	RemainingTiles.Reserve(AllTilesPTR.Num());
	for(UTile* Tile : AllTilesPTR)
		
		{
			RemainingTiles.Add(Tile)  ;
		}
	

	// FIRST RANDOM ID FROM STREAM
	Stream.GenerateNewSeed();
	int FirstIndices =  UKismetMathLibrary::RandomIntegerFromStream(RemainingTiles.Num()-1,Stream);
	
	//Pick A Random Tile	//For the first time choose from stream
	UTile* FirstRandomTile = RemainingTiles[FirstIndices];
	
	// ADDING INSTANCE OF THE SELECTED MESH
	AddInstanceMesh(FirstRandomTile);
	//Update  Collapsed Tile Data
	UpdateCollapsedTileData(FirstRandomTile,AllTilesPTR,RemainingTiles,CollapsedTiles);

	//UPDATE THE SURROUNDING TILES AVAILABLE MESH
	UpdateSurroundingMesh(FirstRandomTile,AllTilesPTR);

	while (!RemainingTiles.IsEmpty())
	{
		// CHOOSE A TILE DEPENDING ENTROPY OF THE TILE
		UTile* Tile = ReturnTileWithLowestEntropy(RemainingTiles);
		if(bIsGenSaturated)
			break;
		AddInstanceMesh(Tile);
		UpdateCollapsedTileData(Tile,AllTilesPTR,RemainingTiles,CollapsedTiles);
		UpdateSurroundingMesh(Tile,RemainingTiles);
	}
	for (UTile*tile :SaturatedTiles)
	{
		tile->SelectedTiledMesh=DefaultTileMesh;
		tile->CollapseStatus =EcollapseStatus::Collapsed;
		FTransform Transform;
		Transform.SetLocation(tile->World_Location);
		tile->SelectedTiledMesh =DefaultTileMesh;
		DefaultTileMesh->InstancedMesh->AddInstance(Transform);
		
	}
}*/


void ABaseProceduralActor::UpdateCollapsedTileData(UTile*Tile , TArray<UTile*>& TotalTilee ,TArray<UTile*>& RemainingTile, TArray<UTile*>& TotalCollapsedTile)
{
	//Update Collapse Status in the main tile

	//FTile&CollapsedTile = TotalTile[ID-1];
	Tile->SetCollapseStatus(EcollapseStatus::Collapsed);

	//Remove From Remaining Title
	RemainingTile.Remove(Tile);

	// Add th the collapsed tile
	TotalCollapsedTile.Add(Tile);
}
/*
UTile*  ABaseProceduralActor::ReturnTileWithLowestEntropy(TArray<UTile*>& TotalTile)
{
	UTile*LowestEntropyTile =DefaultTile;
	bool bfirst = true ;
	bIsGenSaturated =true;
	for(int i = TotalTile.Num()-1 ; i >= 0 ; i-- )
	{
		UTile* tile = TotalTile[i];
		if(tile->CollapseStatus ==EcollapseStatus::Collapsed)
		{
			continue;
		}
		if( tile->AllAvailableMeshToChooseFrom.Num() <=0 )
		{
			tile->bIsSaturated  =true;
			RemainingTiles.Remove(tile);
			SaturatedTiles.Add(tile);
			continue;
		}
		
		if(bfirst)
		{
			LowestEntropyTile = tile;
			bfirst=false;
			bIsGenSaturated =false;
			continue;
		}
		if(tile->AllAvailableMeshToChooseFrom.Num()< LowestEntropyTile->AllAvailableMeshToChooseFrom.Num())
		{
			LowestEntropyTile = tile;
			bIsGenSaturated=false;
		}
	}
	
	return LowestEntropyTile;
}*/

UTile* ABaseProceduralActor::GetTileByID(int ID, TArray<UTile*>& TotalTile)
{
	for (UTile* Tile : TotalTile)
	{
		if(Tile->ID==ID)
			return  Tile ;
	}
	//return &DefaultTile;
	return nullptr;
}

UTile* ABaseProceduralActor::GetTileByPosition2D(FVector2D Pos, TArray<UTile*>& TotalTile)
{
	int32 index = ((Pos.Y - 1) * Map_Height) + (Pos.X - 1);
	return TotalTile[index];
/*	for (UTile* Tile :TotalTile)
	{
		if(Tile->Position_2D.X == Pos.X && Tile->Position_2D.Y == Pos.Y )
		{
			return Tile;
		}
	}
	//if(GEngine){GEngine->AddOnScreenDebugMessage(-1, 5.0f, FColor::Red, TEXT("  ERROR IN TILE FOUND RETURN DEFAULT TILE  "));}
	//return &DefaultTile;
	return  nullptr;*/
}

// CALCULATE LENGTH OF THE  FLOOR MESH 
void ABaseProceduralActor::CalculateMeshLength()
{
	if(bWantCustomTileSize == false)
	{
		if(FloorMesh ==nullptr)
		{
			if(GEngine){GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Yellow, TEXT("  Tile Size Calculation Failed"));}
			return;
		}
		FVector Center ;
		FVector Extent;
		FloorMesh->GetBoundingBox().GetCenterAndExtents(Center,Extent);
		Actor_Length_X = (Extent.X-Center.X)*2;
		Actor_Length_Y = (Extent.Y-Center.Y)*2;
		Actor_Length_Z = (Extent.Z-Center.Z)*2;
	}
}

//THIS FUNCTION GENERATES TILES 
bool ABaseProceduralActor::GenerateTile()
{
	if (!IsInGameThread())
	{
		// The game is not running, return or handle the error
		return false;
	}
	if(TotalTileMesh.IsEmpty())
	{
		if(GEngine){GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Red, TEXT(" Total Tile Not set properly Tile Generation Aborted!!!  "));}
	}
	bool GenerationDone= false;
	int id=0;
	for (int Y = 0 ; Y<  Map_Width ; Y++)
	{
		for (int X = 0 ; X< Map_Height ; X++)
		{
			
			id++;
			AllTiles_Float ++ ;
			int Ypos=Y+1;
			int Xpos=X+1;
			FVector2D POS(Xpos,Ypos);
			FVector2D UnscaledLoc = FVector2d(X,Y);
			

			
			// create a new instance of UTile with NewObject
			UTile* Tile = NewObject<UTile>();

			// create a shared pointer to Tile
			UTile* TilePtr(Tile);

			// Call the Init function to initialize the object
			TilePtr->Init(id, POS,UnscaledLoc, TotalSpawnables);

			// Add the shared pointer to the array
			AllTilesPTR.Add(TilePtr);
			
		}
	}
	GenerationDone=true;
	return GenerationDone;
}

void ABaseProceduralActor::SetTileLength(int Length_X ,int Length_Y )
{
	if(AllTilesPTR.IsEmpty())
	{
		return;
	}
	for (UTile * Tile : AllTilesPTR)
	{
		Tile->World_Location=FVector(Tile->World_Location_2D_UnScaled.X * Length_X ,Tile->World_Location_2D_UnScaled.Y * Length_Y , 0.0 );
	}
}

/*
bool ABaseProceduralActor::GenerateTile_V2()
{
	bool GenerationDone= false;
	int id=0;
	FTileContainer*CurrentTileContainer ;
	for (int i = 0 ; i< Map_Height ; i++)
	{
		for (int j = 0 ; j< Map_Width ; j++)
		{
			
			std::unique_ptr<FTile> tile(new FTile);
			id++;
			tile->ID = id ;
			AllTiles_Float ++ ;
			tile->Position_2D.Height=i+1;
			tile->Position_2D.Width=j+1;
			tile->World_Location = FVector (i*Actor_Length_X , j*Actor_Length_Y,0.0f);

			FTileContainer* TileContainer = new FTileContainer;
			TileContainer->Tile=std::move(tile);
			CurrentTileContainer=TileContainer;
			FTileContainer*NextTileCotainer =new FTileContainer;
			CurrentTileContainer->NextTileContainer =NextTileCotainer;
			CurrentTileContainer=NextTileCotainer;

			if(AllTiles_HEAD==nullptr)
			{
				AllTiles_HEAD=new FTileContainer;
				AllTiles_HEAD->Tile=std::move(tile);
				AllTiles_HEAD->NextTileContainer=CurrentTileContainer;
			}
		}
	}
	GenerationDone=true;
	return GenerationDone;
	
}*/

// THIS FUNCTION CHOOSE RANDOM TILE FROM GIVEN ARRAY
UTile* ABaseProceduralActor::ChooseRandomTile(TArray<UTile*>& AllTileToChooseFrom)
{
	
	int RandomTile = FMath::RandRange(0,AllTileToChooseFrom.Num() );
	return AllTilesPTR[RandomTile];
}



void ABaseProceduralActor::GenerateBaseFloor( TArray<UTile*>& TotalTies)
{
	if(!bWantBaseFloor)
	{
		if(GEngine){GEngine->AddOnScreenDebugMessage(-1, 5.0f, FColor::Yellow, TEXT("  want base floor : false "));}
		return;
	}
	if(TotalTies.IsEmpty())
	{
		if(GEngine){GEngine->AddOnScreenDebugMessage(-1, 5.0f, FColor::Red, TEXT("  TotalTile Empty Base Floor Generation Aborted "));}
		return;
	}
	if(FlorInstanceMeshComponent)
	{
		for(UTile* Tile : TotalTies)
		{
			FTransform Transform ;
			Transform.SetRotation(FQuat::Identity);
			Transform.SetScale3D(FVector(1.0f, 1.0f, 1.0f));
			Transform.SetLocation(Tile->World_Location);
			FlorInstanceMeshComponent->AddInstance(Transform);
		}
	}
}

/*
// THIS FUNCTION UPDATE SURROUNDING MAINLY CALL THOSE 4 FUNCTION
void ABaseProceduralActor::UpdateSurroundingMesh(UTile* SelectedTile, TArray<UTile*>& TotalTile)
{
	FVector2D Position2D = SelectedTile->Position_2D;
	//Left
	if(Position2D.Y-1 >=1 )
	{
		FVector2D Pos (Position2D.X,Position2D.Y-1);
		UTile* LeftNeighbour  = GetTileByPosition2D(Pos,AllTilesPTR);
		UpdateAvailableMesh_Left(SelectedTile,LeftNeighbour);
	}
	//Left UP
	if(Position2D.Y-1 >=1 &&  Position2D.X+1 <=Map_Height)
	{
		FVector2D Pos (Position2D.X+1,Position2D.Y-1);
		UTile* LeftUpNeighbour  = GetTileByPosition2D(Pos,AllTilesPTR);
		UpdateAvailableMesh_LeftUp(SelectedTile,LeftUpNeighbour);
	}
	//Left Down
	if(Position2D.Y-1 >=1  && Position2D.X-1 >=1)
	{
		FVector2D Pos (Position2D.X-1,Position2D.Y-1);
		UTile* LeftDownNeighbour  = GetTileByPosition2D(Pos,AllTilesPTR);
		UpdateAvailableMesh_LeftDown(SelectedTile,LeftDownNeighbour);
	}

	//Right
	if(Position2D.Y+1 <=Map_Width )
	{
		
		FVector2D Pos (Position2D.X,Position2D.Y+1);
		UTile* RightNeighbour  = GetTileByPosition2D(Pos,AllTilesPTR);
		UpdateAvailableMesh_Right(SelectedTile,RightNeighbour);
	}
	//Right Up
	if(Position2D.Y+1 <=Map_Width  &&  Position2D.X+1 <=Map_Height)
	{
		
		FVector2D Pos (Position2D.X+1,Position2D.Y+1);
		UTile* RightUpNeighbour  = GetTileByPosition2D(Pos,AllTilesPTR);
		UpdateAvailableMesh_RightUp(SelectedTile,RightUpNeighbour);
	}
	//Right Down
	if(Position2D.Y+1 <=Map_Width  && Position2D.X-1 >=1 )
	{
		
		FVector2D Pos (Position2D.X-1,Position2D.Y+1);
		UTile* RightDownNeighbour  = GetTileByPosition2D(Pos,AllTilesPTR);
		UpdateAvailableMesh_RightDown(SelectedTile,RightDownNeighbour);
	}
	//Up
	if(Position2D.X+1 <=Map_Height )
	{
		
		FVector2D Pos (Position2D.X+1,Position2D.Y);
		UTile* UpNeighbour  = GetTileByPosition2D(Pos,AllTilesPTR);
		UpdateAvailableMesh_Up(SelectedTile,UpNeighbour);
	}
	//Down
	if(Position2D.X-1 >=1 )
	{
		
		FVector2D Pos (Position2D.X-1,Position2D.Y);
		UTile* DownNeighbour  = GetTileByPosition2D(Pos,AllTilesPTR);
		UpdateAvailableMesh_Down(SelectedTile,DownNeighbour);
	}
}

// UPDATE LEFT SIDE OF THE SELECTED MESH
void ABaseProceduralActor::UpdateAvailableMesh_Left(UTile* SelectedTile,UTile* LeftNeighbour)
{
	
	TArray<USpawnable*> UpdatedAvailableTileMesh;

	if( LeftNeighbour->CollapseStatus==EcollapseStatus::Collapsed)
	{
		return;
	}
	TArray<USpawnable*>TileMeshPTR = LeftNeighbour->AllAvailableSpawnableToChooseFrom;
	
	for (USpawnable* AvailableTileMesh_Left : TileMeshPTR )
	{
		if (AvailableTileMesh_Left == nullptr) {
			continue;
		}

		if (AvailableTileMesh_Left->CompatibleMeshTag_Right.HasTag(SelectedTile->SelectedSpawnable->MeshTag)) {
			UpdatedAvailableTileMesh.Add(AvailableTileMesh_Left);
		}
			
	}
	LeftNeighbour->AllAvailableSpawnableToChooseFrom =UpdatedAvailableTileMesh;
	
}

void ABaseProceduralActor::UpdateAvailableMesh_LeftUp(UTile* SelectedTile, UTile* LeftUpNeighbour)
{
	TArray<UTileMesh*> UpdatedAvailableTileMesh;

	if( LeftUpNeighbour->CollapseStatus==EcollapseStatus::Collapsed)
	{
		return;
	}
	TArray<UTileMesh*>TileMeshPTR = LeftUpNeighbour->AllAvailableMeshToChooseFrom;
	
	for (UTileMesh* AvailableTileMesh_LeftUp : TileMeshPTR )
	{
		if (AvailableTileMesh_LeftUp == nullptr) {
			continue;
		}

		if (AvailableTileMesh_LeftUp->CompatibleMeshTag_Right.HasTag(SelectedTile->SelectedTiledMesh->MeshTag)) {
			UpdatedAvailableTileMesh.Add(AvailableTileMesh_LeftUp);
		}
			
	}
	LeftUpNeighbour->AllAvailableMeshToChooseFrom =UpdatedAvailableTileMesh;
}

void ABaseProceduralActor::UpdateAvailableMesh_LeftDown(UTile* SelectedTile, UTile* LeftDownNeighbour)
{
	TArray<UTileMesh*> UpdatedAvailableTileMesh;

	if( LeftDownNeighbour->CollapseStatus==EcollapseStatus::Collapsed)
	{
		return;
	}
	TArray<UTileMesh*>TileMeshPTR = LeftDownNeighbour->AllAvailableMeshToChooseFrom;
	
	for (UTileMesh* AvailableTileMesh_LeftDown : TileMeshPTR )
	{
		if (AvailableTileMesh_LeftDown == nullptr) {
			continue;
		}

		if (AvailableTileMesh_LeftDown->CompatibleMeshTag_Right.HasTag(SelectedTile->SelectedTiledMesh->MeshTag)) {
			UpdatedAvailableTileMesh.Add(AvailableTileMesh_LeftDown);
		}
			
	}
	LeftDownNeighbour->AllAvailableMeshToChooseFrom =UpdatedAvailableTileMesh;
}

// UPDATE RIGHT SIDE OF THE SELECTED MESH
void ABaseProceduralActor::UpdateAvailableMesh_Right(UTile* SelectedTile,UTile* RightNeighbour)
{
	
	TArray<UTileMesh*> UpdatedAvailableTileMesh;
	
	if(RightNeighbour->CollapseStatus==EcollapseStatus::Collapsed)
	{
		return;
	}
	TArray<UTileMesh*>TileMeshPTR = RightNeighbour->AllAvailableMeshToChooseFrom;

	for (UTileMesh* AvailableTileMesh_Right : TileMeshPTR )
	{
		if (AvailableTileMesh_Right == nullptr) {
			continue;
		}
		if(AvailableTileMesh_Right->CompatibleMeshTag_Left.HasTag(SelectedTile->SelectedTiledMesh->MeshTag))
			UpdatedAvailableTileMesh.Add(AvailableTileMesh_Right);
	}
	RightNeighbour->AllAvailableMeshToChooseFrom =UpdatedAvailableTileMesh;
}

void ABaseProceduralActor::UpdateAvailableMesh_RightUp(UTile* SelectedTile, UTile* RightUpNeighbour)
{
	TArray<UTileMesh*> UpdatedAvailableTileMesh;
	
	if(RightUpNeighbour->CollapseStatus==EcollapseStatus::Collapsed)
	{
		return;
	}
	TArray<UTileMesh*>TileMeshPTR = RightUpNeighbour->AllAvailableMeshToChooseFrom;

	for (UTileMesh* AvailableTileMesh_RightUp : TileMeshPTR )
	{
		if (AvailableTileMesh_RightUp == nullptr) {
			continue;
		}
		if(AvailableTileMesh_RightUp->CompatibleMeshTag_Left.HasTag(SelectedTile->SelectedTiledMesh->MeshTag))
			UpdatedAvailableTileMesh.Add(AvailableTileMesh_RightUp);
	}
	RightUpNeighbour->AllAvailableMeshToChooseFrom =UpdatedAvailableTileMesh;
}

void ABaseProceduralActor::UpdateAvailableMesh_RightDown(UTile* SelectedTile, UTile* RightDownNeighbour)
{
	TArray<UTileMesh*> UpdatedAvailableTileMesh;
	
	if( RightDownNeighbour->CollapseStatus==EcollapseStatus::Collapsed)
	{
		return;
	}
	TArray<UTileMesh*>TileMeshPTR =  RightDownNeighbour->AllAvailableMeshToChooseFrom;

	for (UTileMesh* AvailableTileMesh_RightDown : TileMeshPTR )
	{
		if (AvailableTileMesh_RightDown == nullptr) {
			continue;
		}
		if(AvailableTileMesh_RightDown->CompatibleMeshTag_Left.HasTag(SelectedTile->SelectedTiledMesh->MeshTag))
			UpdatedAvailableTileMesh.Add(AvailableTileMesh_RightDown);
	}
	 RightDownNeighbour->AllAvailableMeshToChooseFrom =UpdatedAvailableTileMesh;
}

// UPDATE UP SIDE OF SELECTED MESH
void ABaseProceduralActor::UpdateAvailableMesh_Up(UTile* SelectedTile,UTile* UpNeighbour)
{
	TArray<UTileMesh*> UpdatedAvailableTileMesh;
	
	if(UpNeighbour->CollapseStatus==EcollapseStatus::Collapsed)
	{
		return;
	}
	TArray<UTileMesh*>TileMeshPTR = UpNeighbour->AllAvailableMeshToChooseFrom;
	for (UTileMesh* AvailableTileMesh_Up : TileMeshPTR )
	{
		if (AvailableTileMesh_Up == nullptr) {
			continue;
		}
		if(AvailableTileMesh_Up->CompatibleMeshTag_Down.HasTag(SelectedTile->SelectedTiledMesh->MeshTag))
			UpdatedAvailableTileMesh.Add(AvailableTileMesh_Up);
	}
	UpNeighbour->AllAvailableMeshToChooseFrom =UpdatedAvailableTileMesh;
}

// UPDATE DOWN SIDE OF SELECTED MESH 
void ABaseProceduralActor::UpdateAvailableMesh_Down(UTile* SelectedTile,UTile* DownNeighbour)
{
		TArray<UTileMesh*> UpdatedAvailableTileMesh;
	
		if(DownNeighbour->CollapseStatus==EcollapseStatus::Collapsed)
		{
			return;
		}
		TArray<UTileMesh*>TileMeshPTR = DownNeighbour->AllAvailableMeshToChooseFrom;
		for (UTileMesh* AvailableTileMesh_Down :TileMeshPTR )
		{
			if (AvailableTileMesh_Down == nullptr) {
				continue;
			}
			if(AvailableTileMesh_Down->CompatibleMeshTag_Up.HasTag(SelectedTile->SelectedTiledMesh->MeshTag))
				UpdatedAvailableTileMesh.Add(AvailableTileMesh_Down);
		}
		DownNeighbour->AllAvailableMeshToChooseFrom =UpdatedAvailableTileMesh;
}


// CHOOSE AN RAND0M ARRAY FROM GIVEN ARRAY OF UTile BASED ON ENTROPY
UTileMesh* ABaseProceduralActor::RandomMeshFromAvailableMesh(UTile* Tile)
{
	//if(Tile.AllAvailableMeshToChooseFrom.Num() == 0)
	if(Tile->AllAvailableMeshToChooseFrom.IsEmpty())
	{
		if(GEngine){GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Red, TEXT("   Available mesh list is empty For this tile unable to select any random Mesh "));}
		return DefaultTileMesh;
	}
	
	int RandomMESH = FMath::RandRange(0,Tile->AllAvailableMeshToChooseFrom.Num()-1 );
	UTileMesh* SelectedTileMesh = Tile->AllAvailableMeshToChooseFrom[RandomMESH];
	return SelectedTileMesh;
}

void ABaseProceduralActor::AddInstanceMesh(UTile* SelectedTile )
{
	
	SelectedTile->SelectedTiledMesh = RandomMeshFromAvailableMesh(SelectedTile);
	if(SelectedTile->SelectedTiledMesh->TileMesh ==nullptr  )
	{
		if(GEngine){GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Red, TEXT(" Instance Add Failedd Selected Tile Didint have any Selected  Mesh "));}
		return;
	}
	if(SelectedTile->SelectedTiledMesh->TileMesh == nullptr)
	{
		return;
	}
	//SelectedTile->SelectedTiledMesh.OwnerTileList.Add(SelectedTile);
	if(SelectedTile->SelectedTiledMesh->TileMesh != nullptr)
	{
		FTransform SpawnTransform ;
		SpawnTransform.SetLocation(SelectedTile->World_Location);
		SelectedTile->SelectedTiledMesh->InstancedMesh->AddInstance(SpawnTransform ,true);
		//SelectedTile->SelectedTiledMesh->InstancedMesh->AddInstanceWorldSpace(SpawnTransform);
		//FlorInstanceMeshComponent->AddInstance(SpawnTransform);
		if(GEngine){GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Green,  TEXT(" INSTANCE ADING DONE "));}
	}
}
*/

bool ABaseProceduralActor::OnReGenerate()
{
	if (GEngine) {
		GEngine->AddOnScreenDebugMessage(-2, 2.0f, FColor::Blue, TEXT(" Generating Actor  "));
	}


	for(int32 j = TotalTileMesh.Num()-1 ; j>= 0 ; j--)
	{
		UTileMesh* TileMesh =TotalTileMesh[j];
		TileMesh->OwnerTileList.Empty();
		TileMesh->InstancedMesh->ClearInstances();
	}

	//
	for (int32 i = AllTilesPTR.Num() - 1; i >= 0; i--)
	{
		UTile* Tile = AllTilesPTR[i];
		Tile->ConditionalBeginDestroy();
		AllTilesPTR.RemoveAt(i);
		RemainingTiles.Remove(Tile);
		CollapsedTiles.Remove(Tile);
		
	}
	AllTilesPTR.Empty();
	RemainingTiles.Empty();
	CollapsedTiles.Empty();

	
	
	//init the class
	//Init();

	//GENERATING TILE
	CalculateMeshLength();
	GenerateTile();
	SetTileLength(Actor_Length_X,Actor_Length_Y);
	GenerateBaseFloor(AllTilesPTR);

	
	
	if (!AllTilesPTR.IsEmpty() && !TotalTileMesh.IsEmpty())
	{
		if (GEngine) {
			GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Green, TEXT(" BOTH TILE AND TOTAL MESH AVAILABLE WAVE FUNCTION CALLING  "));
		}

		// STARTING THE MAIN ALGORITHM
		WaveFunctionCollapse();
	}
	else
	{
		// error occurred, display an error message
		if (GEngine) {
			GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Red, TEXT("Could not generate tile or total mesh. Aborting."));
		}
	}
	
	
	

	return true;
}

bool ABaseProceduralActor::Init() 
{
	if (GetTileMeshData())
	{
		if (SetTileMeshData())
		{
			//setting the floor mesh
			FlorInstanceMeshComponent->SetStaticMesh(FloorMesh);

			//FOR DEBUG CONTAINER ACTOR
			DebugContainerAcotr = GetWorld()->SpawnActor<ACoreDebugContainer>(FVector::ZeroVector, FRotator::ZeroRotator);

			return true;
		}
	}

	return false;
	
}

	// gets the tilemesh data from data table 
    bool GetTileMeshData();

	// setup the data in totaltilemesh
	bool SetTileMeshData ();
	void InitTileMesh(TArray<UTileMesh*>& totaltilemeshes ,TArray<FTileMeshData*>& totaltilemeshedatas);
	
	// The Main function
	UFUNCTION(BlueprintCallable)
	void WaveFunctionCollapse();

	// Calculate the length of mesh
	void CalculateMeshLength();

	// Generate tile
	// Uses the Calculate Length function data to provide world position
	UFUNCTION(BlueprintCallable)
	bool GenerateTile();
	void SetTileLength(int Length_X ,int Length_Y);

	// Choose a random tile from given array
	// Mainly for first random tile choose
	UTile* ChooseRandomTile(TArray<UTile*>& AllTileToChooseFrom);

	// Choose a random mesh from available mesh array
	UTileMesh* RandomMeshFromAvailableMesh(UTile* Tile);

	// This function adds an instance to the selected mesh
	void AddInstanceMesh(UTile* SelectedTile);

	void GenerateBaseFloor(TArray<UTile*>& TotalTile);

	// Just call those 4 surrounded function update function
	void UpdateSurroundingMesh(UTile* SelectedTile, TArray<UTile*>& TotalTile);

	// Updating Surrounding Mesh
	void UpdateAvailableMesh_Left(UTile* SelectedTile,UTile* LeftNeighbour);
	void UpdateAvailableMesh_LeftUp(UTile* SelectedTile,UTile* LeftUpNeighbour);
	void UpdateAvailableMesh_LeftDown(UTile* SelectedTile,UTile* LeftDownNeighbour);
	void UpdateAvailableMesh_Right(UTile* SelectedTile, UTile* RightNeighbour);
	void UpdateAvailableMesh_RightUp(UTile* SelectedTile, UTile* RightUpNeighbour);
	void UpdateAvailableMesh_RightDown(UTile* SelectedTile, UTile* RightDownNeighbour);
	void UpdateAvailableMesh_Up(UTile* SelectedTile, UTile* UpNeighbour);
	void UpdateAvailableMesh_Down(UTile* SelectedTile, UTile* DownNeighbour);

	// Returns mesh with lowest entropy from given array of tiles
	void UpdateCollapsedTileData(UTile*Tile , TArray<UTile*>& TotalTile, TArray<UTile*>& RemainingTilee, TArray<UTile*>&  TotalCollapsedTile);

	// Returns mesh with lowest entropy from given array of tiles
	//UTile* ReturnTileWithLowestEntropy(TArray<UTile*>&  TotalTile);
	UTile* GetTileByID(int ID,TArray<UTile*>& TotalTile);
	UTile* GetTileByPosition2D(FVector2D Pos, TArray<UTile*>& TotalTile);
	
	
		//static ConstructorHelpers::FObjectFinder<UDataTable> TileMeshDataAssetObject(TEXT("DataTable'/ProceduralGeneration/Data/DT_TileMesh.DT_TileMesh'"));
    	static ConstructorHelpers::FObjectFinder<UDataTable> TileMeshDataAssetObject(TEXT("DataTable'/ProceduralGeneration/Data/DT_TileMesh.DT_TileMesh'"));
    
    	if (TileMeshDataAssetObject.Succeeded())
    	{
    		TileMeshDataAsset = TileMeshDataAssetObject.Object;
    	}
    	
    	void ABaseProceduralActor::EndPlay(const EEndPlayReason::Type EndPlayReason)
        {
        	Super::EndPlay(EndPlayReason);
        
        	for (int32 i = AllTilesPTR.Num() - 1; i >= 0; i--)
        	{
        		UTile* Tile = AllTilesPTR[i];
        		Tile->ConditionalBeginDestroy();
        		AllTilesPTR.RemoveAt(i);
        		RemainingTiles.Remove(Tile);
        		CollapsedTiles.Remove(Tile);
        		
        	}
        	//delete [] TileContainer ;
        	for(int32 j = TotalTileMesh.Num()-1 ; j>= 0 ; j--)
        	{
        		UTileMesh* TileMesh =TotalTileMesh[j];
        		TileMesh->ConditionalBeginDestroy();
        		TotalTileMesh.RemoveAt(j);
        	}
        	
        	AllTilesPTR.Empty();
        	RemainingTiles.Empty();
        	CollapsedTiles.Empty();
        	TotalTileMesh.Empty();
        
        	
        
        	if(DefaultTile != nullptr)
        	{
        		DefaultTile->ConditionalBeginDestroy();
        		DefaultTile=nullptr;
        	}
        	if(DefaultTileMesh != nullptr)
        	{
        		DefaultTileMesh->ConditionalBeginDestroy();
        		DefaultTileMesh = nullptr ;
        	}
        
        	if (ControllerWindow.IsValid() && ControllerWindow->IsVisible())
        	{
        		// The window is already visible, so just hide it
        		ControllerWindow->HideWindow();
        		FSlateApplication::Get().DestroyWindowImmediately(ControllerWindow.ToSharedRef());
        		ControllerWindow.Reset();
        	}
        	
        }
        
        
        void UCoreGenerator::AddUIEntry()
        {
        	if(ControllerTab ==nullptr)
        	{
        		return;
        	}
        	// Get the vertical box widget
        	TSharedPtr<SVerticalBox> VerticalBoxWidget = StaticCastSharedRef<SVerticalBox>(ControllerTab->GetWidget().ToSharedRef());
        
        	if(VerticalBoxWidget==nullptr)
        		return;
        
        	// Add a new slot to the vertical box and create a collapsible box widget inside the slot
        	VerticalBoxWidget->AddSlot()
        					.VAlign(VAlign_Top)
        					.HAlign(HAlign_Fill)
        	
        				[
        					SNew(SExpandableArea)
        					.BorderBackgroundColor(FLinearColor(1.0f, 1.0f, 1.0f, 0.5f))
        					.BodyBorderBackgroundColor(FLinearColor(0.25f, 0.25f, 0.25f, 0.5f))
        					.HeaderContent()
        					[
        							SNew(SBorder)
        							.BorderBackgroundColor(FLinearColor(1.0f, 1.0f, 1.0f, 1.0f))
        								[
        								  SNew(STextBlock)
        								  .Font(FSlateFontInfo(FPaths::EngineContentDir() / TEXT("Slate/Fonts/Roboto-Bold.ttf"), 10))
        								  .ColorAndOpacity(FLinearColor::White)
        								  .Text(FText::FromString("Generator"))
        								]
        					]
        					.BodyContent()
        					[
        						SNew(SVerticalBox)
        							+ SVerticalBox::Slot()
        							.Padding(5.0f)
        							
        								[
        									SNew(STextBlock)
        									.Text(FText::FromString("New Area"))
        									/*SNew(SComboButton)
        									.OnGetMenuContent(this, &UCoreGenerator::HandleMenuContent)
        									.ContentPadding(FMargin(2.0f, 2.0f))
        									.ButtonContent()
        									[
        										SNew(STextBlock)
        										.Text(LOCTEXT("CustomDataAsset", "Choose Custom Data Asset"))
        									]*/
        								]
        							
        					]
        			];
        }